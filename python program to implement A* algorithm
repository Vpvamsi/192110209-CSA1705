import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # Cost from start node to current node
        self.h = h  # Heuristic estimate from current node to goal node
    def f(self):
        return self.g + self.h
class AStar:
    def __init__(self, start_state, goal_state, heuristic):
        self.start_node = Node(start_state)
        self.goal_state = goal_state
        self.heuristic = heuristic
    def find_path(self):
        open_list = []
        closed_set = set()
        heapq.heappush(open_list, (self.start_node.f(), id(self.start_node), self.start_node))
        while open_list:
            _, _, current_node = heapq.heappop(open_list)
            if current_node.state == self.goal_state:
            return self.reconstruct_path(current_node)
            closed_set.add(current_node.state)
            for successor_state, cost in self.successors(current_node.state):
                if successor_state in closed_set:
                    continue
                g = current_node.g + cost
                h = self.heuristic(successor_state, self.goal_state)
                successor_node = Node(successor_state, current_node, g, h)
                heapq.heappush(open_list, (successor_node.f(), id(successor_node), successor_node))
        return None
    def successors(self, state):
        pass

    def reconstruct_path(self, node):
        path = []
        while node:
            path.append(node.state)
            node = node.parent
        return path[::-1]
def heuristic(state, goal_state):
    return abs(state[0] - goal_state[0]) + abs(state[1] - goal_state[1])

class GridAStar(AStar):
    def successors(self, state):
        row, col = state
        successors = []

        for dr, dc in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < 5 and 0 <= new_col < 5:  # Adjust this condition based on grid size
                successors.append(((new_row, new_col), 1))  # Assuming uniform cost for movement
        return successors

start_state = (0, 0)
goal_state = (4, 4)
astar = GridAStar(start_state, goal_state, heuristic)
path = astar.find_path()

if path:
    print("Path found:", path)
else:
    print("No path found.")
