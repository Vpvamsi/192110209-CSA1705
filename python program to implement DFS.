class Graph:
    def __init__(self):
        self.graph = {}
    def add_edge(self, node, neighbor):
        if node not in self.graph:
            self.graph[node] = []
        self.graph[node].append(neighbor)
    def dfs_util(self, node, visited):
        visited.add(node)
        print(node, end=" ")
        for neighbor in self.graph.get(node, []):
            if neighbor not in visited:
              self.dfs_util(neighbor, visited)
    def dfs(self, start_node):
        visited = set()
        self.dfs_util(start_node, visited)
g = Graph()
g.add_edge('A', 'B')
g.add_edge('A', 'C')
g.add_edge('B', 'D')
g.add_edge('B', 'E')
g.add_edge('C', 'F')
print("DFS traversal starting from node 'A':")
g.dfs('A')


OUTPUT:
DFS traversal starting from node 'A':
A B D E C F 
