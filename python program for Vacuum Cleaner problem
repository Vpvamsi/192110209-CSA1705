class VacuumCleaner:
    def __init__(self, grid):
        self.grid = grid
        self.rows = len(grid)
        self.cols = len(grid[0])
        self.visited = set()
    def is_valid(self, row, col):
        return 0 <= row < self.rows and 0 <= col < self.cols
    def clean(self, row, col):
        if not self.is_valid(row, col) or (row, col) in self.visited:
            return
        print(f"Cleaning cell ({row}, {col})")
        self.visited.add((row, col))
        self.grid[row][col] = 0
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        for dr, dc in directions:
            new_row, new_col = row + dr, col + dc
            self.clean(new_row, new_col)
    def clean_all(self):
        for i in range(self.rows):
            for j in range(self.cols):
                if self.grid[i][j] == 1:
                    self.clean(i, j)
grid = [
    [1, 0, 1],
    [0, 1, 0],
    [1, 1, 1]
]
vacuum = VacuumCleaner(grid)
vacuum.clean_all()
