import heapq
goal_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)
moves = {
    0: [1, 3],
    1: [0, 2, 4],
    2: [1, 5],
    3: [0, 4, 6],
    4: [1, 3, 5, 7],
    5: [2, 4, 8],
    6: [3, 7],
    7: [4, 6, 8],
    8: [5, 7]
}
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            digit = state[i * 3 + j]
            if digit != 0:
                distance += abs(i - (digit - 1) // 3) + abs(j - (digit - 1) % 3)
    return distance
def get_next_states(state):
    zero_index = state.index(0)
    next_states = []
    for move in moves[zero_index]:
        new_state = list(state)
        new_state[zero_index], new_state[move] = new_state[move], new_state[zero_index]
        next_states.append(tuple(new_state))
    return next_states
def a_star(initial_state):
    frontier = [(manhattan_distance(initial_state), 0, initial_state)]
    visited = set() 
    while frontier:
        _, cost, state = heapq.heappop(frontier)
        if state == goal_state:
            return cost
        visited.add(state)
        for next_state in get_next_states(state):
            if next_state not in visited:
                new_cost = cost + 1
                heapq.heappush(frontier, (new_cost + manhattan_distance(next_state), new_cost, next_state))
    return None
if __name__ == "__main__":
    initial_state = (1, 2, 3, 4, 5, 6, 7, 0, 8)  # Initial state
    steps = a_star(initial_state)
    if steps is not None:
        print(f"Minimum number of steps to reach the goal state: {steps}")
    else:
        print("Goal state is not reachable!")
