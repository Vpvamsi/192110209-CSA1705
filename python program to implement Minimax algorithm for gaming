import math
def evaluate(board):
    for row in board:
        if all(cell == 'X' for cell in row):
            return 1
        elif all(cell == 'O' for cell in row):
            return -1
    for col in range(3):
        if all(board[row][col] == 'X' for row in range(3)):
            return 1
        elif all(board[row][col] == 'O' for row in range(3)):
            return -1
    if all(board[i][i] == 'X' for i in range(3)) or all(board[i][2-i] == 'X' for i in range(3)):
        return 1
    elif all(board[i][i] == 'O' for i in range(3)) or all(board[i][2-i] == 'O' for i in range(3)):
        return -1
    if any(' ' in row for row in board):
        return 0  # Game still ongoing
    else:
        return 0  # Draw

def minimax(board, depth, is_maximizing):
    """
    Minimax algorithm implementation.
    """
    score = evaluate(board)

    if score == 1:
        return score - depth
    elif score == -1:
        return score + depth
    elif score == 0:
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    score = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    score = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    best_score = min(score, best_score)
        return best_score

def find_best_move(board):

    best_score = -math.inf
    best_move = None

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                score = minimax(board, 0, False)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    best_move = (i, j)
    return best_move
if __name__ == "__main__":
    board = [[' ', ' ', ' '],
             [' ', ' ', ' '],
             [' ', ' ', ' ']]
    print("Initial board:")
    for row in board:
        print(row)
    while evaluate(board) == 0:
        player_row = int(input("Enter row (0-2): "))
        player_col = int(input("Enter column (0-2): "))
        if board[player_row][player_col] != ' ':
            print("Invalid move! Try again.")
            continue
        board[player_row][player_col] = 'O'
        if evaluate(board) != 0:
            break
        print("Computer's turn:")
        computer_move = find_best_move(board)
        board[computer_move[0]][computer_move[1]] = 'X'

        print("Updated board:")
        for row in board:
            print(row)
    result = evaluate(board)
    if result == 1:
        print("Computer wins!")
    elif result == -1:
        print("Player wins!")
    else:
        print("It's a draw!")

OUTPUT:

Initial board:
[' ', ' ', ' ']
[' ', ' ', ' ']
[' ', ' ', ' ']
Enter row (0-2): 1
Enter column (0-2): 2
Computer's turn:
Updated board:
['X', ' ', ' ']
[' ', ' ', 'O']
[' ', ' ', ' ']
Enter row (0-2): 0
Enter column (0-2): 1
Computer's turn:
Updated board:
['X', 'O', 'X']
[' ', ' ', 'O']
[' ', ' ', ' ']
Enter row (0-2): 2
Enter column (0-2): 1
Computer's turn:
Updated board:
['X', 'O', 'X']
['X', ' ', 'O']
[' ', 'O', ' ']
Enter row (0-2): 1
Enter column (0-2): 0
Invalid move! Try again.
Enter row (0-2): 2
Enter column (0-2): 2
Computer's turn:
Updated board:
['X', 'O', 'X']
['X', ' ', 'O']
['X', 'O', 'O']
Computer wins!
> 
